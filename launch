#!/bin/sh

# load env vars
source .fastlane/.env

prepare_apk () {
  echo "Removing existing apk..."
  rm $ANDROID_BUILD/production.apk

  echo "Signing Android apk..."
  jarsigner -verbose \
    -sigalg SHA1withRSA \
    -digestalg SHA1 \
    -storepass $ANDROID_STORE_PASS \
    $ANDROID_BUILD/release-unsigned.apk \
    $ANDROID_KEY

  echo "Aligning Android apk..."
  $ANDROID_ZIPALIGN 4 \
    $ANDROID_BUILD/release-unsigned.apk \
    $ANDROID_BUILD/production.apk
}

android_hockey () {
  echo "Posting to Hockey..."
  curl -F "status=2" \
    -F "notify=1" \
    -F "ipa=@$ANDROID_BUILD/production.apk" \
    -H "X-HockeyAppToken: $ANDROID_HOCKEY_TOKEN" \
    https://rink.hockeyapp.net/api/2/apps/${ANDROID_HOCKEY_ID}/app_versions/upload
}

android_play_store () {
  echo "Deploying to Google Play..."

  playup \
    --auth $PLAY_API_KEY \
    $ANDROID_BUILD/production.apk
}

if [[ -z $2 ]]; then
  echo "Please provide a server as the second argument"
fi

echo "Building meteor..."
meteor build .build --server $2

# deploy to TestFlight if 'beta'
if [[ $1 = "beta" ]]; then
  echo "Deploying to TestFlight..."
  fastlane ios beta
# deploy to Hocker if 'hockey'
elif [[ $1 = "hockey" ]]; then
  echo "Deploying to Hockey..."
  # prepare_apk
  # android_hockey
  fastlane ios hockey
# deploy to production if 'deploy'
elif [[ $1 = "deploy" ]]; then
  echo "Deploying to production..."
  prepare_apk
  android_play_store
  fastlane ios deploy
elif [[ $1 = "play" ]]; then
  prepare_apk
  android_play_store
elif [[ $1 = "appstore" ]]; then
  echo "Deploying to App Store..."
  fastlane ios deploy
elif [[ $1 = "build" ]]; then
  echo "Just building the app..."
  fastlane ios build
else
  echo "Done"
fi
